{"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signUpUser = signUpUser;\n\nvar _Authentication = require('../../../../build/contracts/Authentication.json');\n\nvar _Authentication2 = _interopRequireDefault(_Authentication);\n\nvar _LoginButtonActions = require('../loginbutton/LoginButtonActions');\n\nvar _store = require('../../../store');\n\nvar _store2 = _interopRequireDefault(_store);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar contract = require('truffle-contract');\n\nfunction signUpUser(name) {\n  var web3 = _store2.default.getState().web3.web3Instance;\n\n  // Double-check web3's status.\n  if (typeof web3 !== 'undefined') {\n\n    return function (dispatch) {\n      // Using truffle-contract we create the authentication object.\n      var authentication = contract(_Authentication2.default);\n      authentication.setProvider(web3.currentProvider);\n\n      // Declaring this for later so we can chain functions on Authentication.\n      var authenticationInstance;\n\n      // Get current ethereum wallet.\n      web3.eth.getCoinbase(function (error, coinbase) {\n        // Log errors, if any.\n        if (error) {\n          console.error(error);\n        }\n\n        authentication.deployed().then(function (instance) {\n          authenticationInstance = instance;\n          console.log(\"hola\");\n\n          // Attempt to sign up user.\n          authenticationInstance.signup(name, { from: coinbase }).then(function (result) {\n            console.log(email);\n            console.log('bien');\n            // If no error, login user.\n            return dispatch((0, _LoginButtonActions.loginUser)());\n          }).catch(function (result) {\n            // If error...\n            console.log('error');\n          });\n        });\n      });\n    };\n  } else {\n    console.error('Web3 is not initialized.');\n  }\n}","map":{"version":3,"sources":["src/user/ui/signupform/SignUpFormActions.js"],"names":["signUpUser","contract","require","name","web3","getState","web3Instance","dispatch","authentication","setProvider","currentProvider","authenticationInstance","eth","getCoinbase","error","coinbase","console","deployed","then","instance","log","signup","from","result","email","catch"],"mappings":";;;;;QAMgBA,U,GAAAA,U;;AANhB;;;;AACA;;AACA;;;;;;AAEA,IAAMC,WAAWC,QAAQ,kBAAR,CAAjB;;AAEO,SAASF,UAAT,CAAoBG,IAApB,EAA0B;AAC/B,MAAIC,OAAO,gBAAMC,QAAN,GAAiBD,IAAjB,CAAsBE,YAAjC;;AAEA;AACA,MAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiC;;AAE/B,WAAO,UAASG,QAAT,EAAmB;AACxB;AACA,UAAMC,iBAAiBP,kCAAvB;AACAO,qBAAeC,WAAf,CAA2BL,KAAKM,eAAhC;;AAEA;AACA,UAAIC,sBAAJ;;AAEA;AACAP,WAAKQ,GAAL,CAASC,WAAT,CAAqB,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACxC;AACA,YAAID,KAAJ,EAAW;AACTE,kBAAQF,KAAR,CAAcA,KAAd;AACD;;AAEDN,uBAAeS,QAAf,GAA0BC,IAA1B,CAA+B,UAASC,QAAT,EAAmB;AAChDR,mCAAyBQ,QAAzB;AACAH,kBAAQI,GAAR,CAAY,MAAZ;;AAEA;AACAT,iCAAuBU,MAAvB,CAA8BlB,IAA9B,EAAoC,EAACmB,MAAMP,QAAP,EAApC,EACCG,IADD,CACM,UAASK,MAAT,EAAiB;AACrBP,oBAAQI,GAAR,CAAYI,KAAZ;AACAR,oBAAQI,GAAR,CAAY,MAAZ;AACA;AACA,mBAAOb,SAAS,oCAAT,CAAP;AACD,WAND,EAOCkB,KAPD,CAOO,UAASF,MAAT,EAAiB;AACtB;AACAP,oBAAQI,GAAR,CAAY,OAAZ;AACD,WAVD;AAWD,SAhBD;AAiBD,OAvBD;AAwBD,KAjCD;AAkCD,GApCD,MAoCO;AACLJ,YAAQF,KAAR,CAAc,0BAAd;AACD;AACF","file":"SignUpFormActions.js","sourceRoot":"/Users/polo/Google Drive/Germany 2015/5th Semester/Thesis/Thesis/Code/box","sourcesContent":["import AuthenticationContract from '../../../../build/contracts/Authentication.json'\nimport { loginUser } from '../loginbutton/LoginButtonActions'\nimport store from '../../../store'\n\nconst contract = require('truffle-contract')\n\nexport function signUpUser(name) {\n  let web3 = store.getState().web3.web3Instance\n\n  // Double-check web3's status.\n  if (typeof web3 !== 'undefined') {\n\n    return function(dispatch) {\n      // Using truffle-contract we create the authentication object.\n      const authentication = contract(AuthenticationContract)\n      authentication.setProvider(web3.currentProvider)\n\n      // Declaring this for later so we can chain functions on Authentication.\n      var authenticationInstance\n\n      // Get current ethereum wallet.\n      web3.eth.getCoinbase((error, coinbase) => {\n        // Log errors, if any.\n        if (error) {\n          console.error(error);\n        }\n\n        authentication.deployed().then(function(instance) {\n          authenticationInstance = instance\n          console.log(\"hola\");\n\n          // Attempt to sign up user.\n          authenticationInstance.signup(name, {from: coinbase})\n          .then(function(result) {\n            console.log(email);\n            console.log('bien');\n            // If no error, login user.\n            return dispatch(loginUser())\n          })\n          .catch(function(result) {\n            // If error...\n            console.log('error');\n          })\n        })\n      })\n    }\n  } else {\n    console.error('Web3 is not initialized.');\n  }\n}\n"]}}