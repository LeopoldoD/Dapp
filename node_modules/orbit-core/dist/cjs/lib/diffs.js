'use strict';

var eq = require('./eq');
var objects = require('./objects');
var config = require('./config');

/* eslint-disable valid-jsdoc */
var diffs = function diffs(a, b, options) {
  if (a === b) {
    return undefined;
  } else {
    options = options || {};

    var ignore = config.arrayToOptions(options.ignore);
    var basePath = options.basePath || '';

    if (objects.isArray(basePath)) {
      basePath = basePath.join('/');
    }

    var type = Object.prototype.toString.call(a);
    if (type === Object.prototype.toString.call(b)) {
      if (a !== null && typeof a === 'object') {
        var i, d;

        if (objects.isArray(a)) {
          var aLength = a.length;
          var bLength = b.length;
          var maxLength = bLength > aLength ? bLength : aLength;
          var match = undefined;
          var ai = 0;
          var bi = 0;
          var bj = undefined;

          for (i = 0; i < maxLength; i++) {
            if (ai >= aLength) {
              if (d === undefined) {
                d = [];
              }
              d.push({ op: 'add', path: basePath + '/' + bi, value: objects.clone(b[bi]) });
              bi++;
            } else if (bi >= bLength) {
              if (d === undefined) {
                d = [];
              }
              d.push({ op: 'remove', path: basePath + '/' + ai });
              ai++;
            } else if (!eq.eq(a[ai], b[bi])) {
              match = -1;
              for (bj = bi + 1; bj < bLength; bj++) {
                if (eq.eq(a[ai], b[bj])) {
                  match = bj;
                  break;
                }
              }
              if (match === -1) {
                if (d === undefined) {
                  d = [];
                }
                d.push({ op: 'remove', path: basePath + '/' + ai });
                ai++;
              } else {
                if (d === undefined) {
                  d = [];
                }
                d.push({ op: 'add', path: basePath + '/' + bi, value: objects.clone(b[bi]) });
                bi++;
              }
            } else {
              ai++;
              bi++;
            }
          }
        } else if (a instanceof Date) {
          if (a.getTime() === b.getTime()) {
            return;
          }
          if (d === undefined) {
            d = [];
          }
          d.push({ op: 'replace', path: basePath, value: objects.clone(b) });
        } else {
          // general (non-array) object
          for (i in b) {
            if (!ignore[i] && b.hasOwnProperty(i)) {
              if (a[i] === undefined) {
                if (d === undefined) {
                  d = [];
                }
                d.push({ op: 'add', path: basePath + '/' + i, value: objects.clone(b[i]) });
              } else if (!eq.eq(a[i], b[i])) {
                if (d === undefined) {
                  d = [];
                }
                d = d.concat(diffs(a[i], b[i], { basePath: basePath + '/' + i }));
              }
            }
          }

          for (i in a) {
            if (!ignore[i] && a.hasOwnProperty(i)) {
              if (b[i] === undefined) {
                if (d === undefined) {
                  d = [];
                }
                d.push({ op: 'remove', path: basePath + '/' + i });
              }
            }
          }
        }

        return d;
      } else if (eq.eq(a, b)) {
        return undefined;
      }
    }

    return [{ op: 'replace', path: basePath, value: objects.clone(b) }];
  }
};

exports.diffs = diffs;