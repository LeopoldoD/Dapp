'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

exports.toIdentifier = toIdentifier;
exports.parseIdentifier = parseIdentifier;
exports.identity = identity;
exports.eqIdentity = eqIdentity;

var objects = require('./objects');

function toIdentifier(type, id) {
  if (type) {
    if (objects.isObject(type)) {
      return type.type + ':' + type.id;
    } else {
      return type + ':' + id;
    }
  } else {
    return null;
  }
}

function parseIdentifier(identifier) {
  var _identifier$split = identifier.split(':');

  var _identifier$split2 = _slicedToArray(_identifier$split, 2);

  var type = _identifier$split2[0];
  var id = _identifier$split2[1];

  return { type: type, id: id };
}

function identity(record) {
  var type = record.type;
  var id = record.id;

  return { type: type, id: id };
}

function eqIdentity(record1, record2) {
  return objects.isNone(record1) && objects.isNone(record2) || objects.isObject(record1) && objects.isObject(record2) && record1.type === record2.type && record1.id === record2.id;
}