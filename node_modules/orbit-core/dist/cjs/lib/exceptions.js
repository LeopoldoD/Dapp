'use strict';

/* eslint-disable valid-jsdoc */

/**
 Base Exception

 @class Exception
 @namespace Orbit
 @constructor
 */

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Exception = function Exception(message) {
  _classCallCheck(this, Exception);

  this.message = message;
  this.error = new Error(this.message);
  this.stack = this.error.stack;
}

/**
 Exception thrown when a path in a document can not be found.

 @class PathNotFoundException
 @namespace Orbit
 @param {String} path
 @constructor
 */
;

var PathNotFoundException = (function (_Exception) {
  _inherits(PathNotFoundException, _Exception);

  function PathNotFoundException(path) {
    _classCallCheck(this, PathNotFoundException);

    _get(Object.getPrototypeOf(PathNotFoundException.prototype), 'constructor', this).call(this, 'Path not found: ' + path.join('/'));
    this.path = path;
  }

  return PathNotFoundException;
})(Exception);

var TransformNotLoggedException = (function (_Exception2) {
  _inherits(TransformNotLoggedException, _Exception2);

  function TransformNotLoggedException(transformId) {
    _classCallCheck(this, TransformNotLoggedException);

    _get(Object.getPrototypeOf(TransformNotLoggedException.prototype), 'constructor', this).call(this, 'Transform not logged: ' + transformId);
    this.transformId = transformId;
  }

  return TransformNotLoggedException;
})(Exception);

var QueryBuilderNotRegisteredException = (function (_Exception3) {
  _inherits(QueryBuilderNotRegisteredException, _Exception3);

  function QueryBuilderNotRegisteredException(queryBuilder) {
    _classCallCheck(this, QueryBuilderNotRegisteredException);

    _get(Object.getPrototypeOf(QueryBuilderNotRegisteredException.prototype), 'constructor', this).call(this, 'QueryBuilder not registered: ' + queryBuilder);
    this.queryBuilder = queryBuilder;
  }

  return QueryBuilderNotRegisteredException;
})(Exception);

var OutOfRangeException = (function (_Exception4) {
  _inherits(OutOfRangeException, _Exception4);

  function OutOfRangeException(value) {
    _classCallCheck(this, OutOfRangeException);

    _get(Object.getPrototypeOf(OutOfRangeException.prototype), 'constructor', this).call(this, 'Out of range: ' + value);
    this.value = value;
  }

  /**
   Exception thrown when an operation is not allowed.
  
   @class OperationNotAllowed
   @param {Object} description
   @constructor
   */
  return OutOfRangeException;
})(Exception);

var OperationNotAllowed = (function (_Exception5) {
  _inherits(OperationNotAllowed, _Exception5);

  function OperationNotAllowed(operation) {
    _classCallCheck(this, OperationNotAllowed);

    _get(Object.getPrototypeOf(OperationNotAllowed.prototype), 'constructor', this).call(this, 'Operation not allowed: ' + operation);
    this.operation = operation;
  }

  return OperationNotAllowed;
})(Exception);

var TransformNotAllowed = (function (_Exception6) {
  _inherits(TransformNotAllowed, _Exception6);

  function TransformNotAllowed(transform) {
    _classCallCheck(this, TransformNotAllowed);

    _get(Object.getPrototypeOf(TransformNotAllowed.prototype), 'constructor', this).call(this, 'Transform not allowed: ' + transform);
    this.transform = transform;
  }

  return TransformNotAllowed;
})(Exception);

var QueryNotAllowed = (function (_Exception7) {
  _inherits(QueryNotAllowed, _Exception7);

  function QueryNotAllowed(query) {
    _classCallCheck(this, QueryNotAllowed);

    _get(Object.getPrototypeOf(QueryNotAllowed.prototype), 'constructor', this).call(this, 'Query not allowed: ' + query);
    this.query = query;
  }

  return QueryNotAllowed;
})(Exception);

var QueryExpressionParseError = (function (_Exception8) {
  _inherits(QueryExpressionParseError, _Exception8);

  function QueryExpressionParseError(expression) {
    _classCallCheck(this, QueryExpressionParseError);

    _get(Object.getPrototypeOf(QueryExpressionParseError.prototype), 'constructor', this).call(this, 'Query expression parse error: ' + expression);
    this.expression = expression;
  }

  return QueryExpressionParseError;
})(Exception);

var UpdateNotAllowed = (function (_Exception9) {
  _inherits(UpdateNotAllowed, _Exception9);

  function UpdateNotAllowed(transform) {
    _classCallCheck(this, UpdateNotAllowed);

    _get(Object.getPrototypeOf(UpdateNotAllowed.prototype), 'constructor', this).call(this, 'Update not allowed: ' + transform);
    this.transform = transform;
  }

  return UpdateNotAllowed;
})(Exception);

var ModelNotRegisteredException = (function (_Exception10) {
  _inherits(ModelNotRegisteredException, _Exception10);

  function ModelNotRegisteredException(model) {
    _classCallCheck(this, ModelNotRegisteredException);

    _get(Object.getPrototypeOf(ModelNotRegisteredException.prototype), 'constructor', this).call(this, 'Model not registered: ' + model);
    this.model = model;
  }

  return ModelNotRegisteredException;
})(Exception);

var KeyNotRegisteredException = (function (_Exception11) {
  _inherits(KeyNotRegisteredException, _Exception11);

  function KeyNotRegisteredException(model, key) {
    _classCallCheck(this, KeyNotRegisteredException);

    _get(Object.getPrototypeOf(KeyNotRegisteredException.prototype), 'constructor', this).call(this, 'Key not registered: \'' + model + '#' + key + '\'');
    this.model = model;
    this.key = key;
  }

  return KeyNotRegisteredException;
})(Exception);

var RelationshipNotRegisteredException = (function (_Exception12) {
  _inherits(RelationshipNotRegisteredException, _Exception12);

  function RelationshipNotRegisteredException(model, relationship) {
    _classCallCheck(this, RelationshipNotRegisteredException);

    _get(Object.getPrototypeOf(RelationshipNotRegisteredException.prototype), 'constructor', this).call(this, 'Relationship not registered: \'' + model + '#' + relationship + '\'');
    this.model = model;
    this.relationship = relationship;
  }

  return RelationshipNotRegisteredException;
})(Exception);

var ClientError = (function (_Exception13) {
  _inherits(ClientError, _Exception13);

  function ClientError(description) {
    _classCallCheck(this, ClientError);

    _get(Object.getPrototypeOf(ClientError.prototype), 'constructor', this).call(this, 'Client error: ' + description);
  }

  return ClientError;
})(Exception);

var ServerError = (function (_Exception14) {
  _inherits(ServerError, _Exception14);

  function ServerError(description) {
    _classCallCheck(this, ServerError);

    _get(Object.getPrototypeOf(ServerError.prototype), 'constructor', this).call(this, 'Server error: ' + description);
  }

  return ServerError;
})(Exception);

var NetworkError = (function (_Exception15) {
  _inherits(NetworkError, _Exception15);

  function NetworkError(description) {
    _classCallCheck(this, NetworkError);

    _get(Object.getPrototypeOf(NetworkError.prototype), 'constructor', this).call(this, 'Network error: ' + description);
  }

  return NetworkError;
})(Exception);

var _RecordException = (function (_Exception16) {
  _inherits(_RecordException, _Exception16);

  function _RecordException(description, type, id, relationship) {
    _classCallCheck(this, _RecordException);

    var message = description + ': ' + type + ':' + id;

    if (relationship) {
      message += '/' + relationship;
    }

    _get(Object.getPrototypeOf(_RecordException.prototype), 'constructor', this).call(this, message);

    this.type = type;
    this.id = id;
    this.relationship = relationship;
  }

  /**
   Exception thrown when a record can not be found.
  
   @class RecordNotFoundException
   @param {String} type
   @param {String} id
   @constructor
   */
  return _RecordException;
})(Exception);

var RecordNotFoundException = (function (_RecordException2) {
  _inherits(RecordNotFoundException, _RecordException2);

  function RecordNotFoundException(type, id) {
    _classCallCheck(this, RecordNotFoundException);

    _get(Object.getPrototypeOf(RecordNotFoundException.prototype), 'constructor', this).call(this, 'Record not found', type, id);
  }

  /**
   Exception thrown when a relationship can not be found.
  
   @class RelationshipNotFoundException
   @namespace OC
   @param {String} type
   @param {String} id
   @constructor
   */
  return RecordNotFoundException;
})(_RecordException);

var RelationshipNotFoundException = (function (_RecordException3) {
  _inherits(RelationshipNotFoundException, _RecordException3);

  function RelationshipNotFoundException(type, id, relationship) {
    _classCallCheck(this, RelationshipNotFoundException);

    _get(Object.getPrototypeOf(RelationshipNotFoundException.prototype), 'constructor', this).call(this, 'Relationship not found', type, id, relationship);
  }

  /**
   Exception thrown when a record already exists.
  
   @class RecordAlreadyExistsException
   @namespace OC
   @param {String} type
   @param {Object} record
   @constructor
   */
  return RelationshipNotFoundException;
})(_RecordException);

var RecordAlreadyExistsException = (function (_RecordException4) {
  _inherits(RecordAlreadyExistsException, _RecordException4);

  function RecordAlreadyExistsException(type, id) {
    _classCallCheck(this, RecordAlreadyExistsException);

    _get(Object.getPrototypeOf(RecordAlreadyExistsException.prototype), 'constructor', this).call(this, 'Record already exists', type, id);
  }

  return RecordAlreadyExistsException;
})(_RecordException);

exports.Exception = Exception;
exports.PathNotFoundException = PathNotFoundException;
exports.TransformNotLoggedException = TransformNotLoggedException;
exports.QueryBuilderNotRegisteredException = QueryBuilderNotRegisteredException;
exports.OutOfRangeException = OutOfRangeException;
exports.OperationNotAllowed = OperationNotAllowed;
exports.TransformNotAllowed = TransformNotAllowed;
exports.QueryNotAllowed = QueryNotAllowed;
exports.QueryExpressionParseError = QueryExpressionParseError;
exports.UpdateNotAllowed = UpdateNotAllowed;
exports.ModelNotRegisteredException = ModelNotRegisteredException;
exports.KeyNotRegisteredException = KeyNotRegisteredException;
exports.RelationshipNotRegisteredException = RelationshipNotRegisteredException;
exports.ClientError = ClientError;
exports.ServerError = ServerError;
exports.NetworkError = NetworkError;
exports.RecordNotFoundException = RecordNotFoundException;
exports.RelationshipNotFoundException = RelationshipNotFoundException;
exports.RecordAlreadyExistsException = RecordAlreadyExistsException;