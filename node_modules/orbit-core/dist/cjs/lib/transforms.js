'use strict';

exports.operationsInTransforms = operationsInTransforms;
exports.reduceTransforms = reduceTransforms;
exports.coalesceTransforms = coalesceTransforms;

var Transform = require('../transform');
var ___operations = require('./operations');

/* eslint-disable valid-jsdoc */
function operationsInTransforms(transforms) {
  var operations = [];

  transforms.forEach(function (t) {
    Array.prototype.push.apply(operations, t.operations);
  });

  return operations;
}

/**
 Reduces an array of transforms into a single transform containing a merged set
 of operations.

 @method reduceTransforms
 @param {Array} transforms
 @returns {Transform} A new Transform that contains a merged set of operations.
 */
function reduceTransforms(transforms) {
  var operations = operationsInTransforms(transforms);

  return Transform['default'].from(operations);
}

/**
 Reduces an array of transforms into a single transform containing a minimal set
 of equivalent coalesced operations.

 @method coalesceTransforms
 @param {Array} transforms
 @returns {Transform} A new Transform that contains a merged and coalesced set of operations.
 */
function coalesceTransforms(transforms) {
  var operations = operationsInTransforms(transforms);
  var coalescedOperations = ___operations.coalesceOperations(operations);

  return Transform['default'].from(coalescedOperations);
}