'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

exports.buildPatternMatcher = buildPatternMatcher;

function getPath(object, path) {
  return path.reduce(function (reference, property) {
    return reference && reference[property];
  }, object);
}

var ValueMatcher = (function () {
  function ValueMatcher(path, value) {
    _classCallCheck(this, ValueMatcher);

    this.path = path;
    this.value = value;
  }

  _createClass(ValueMatcher, [{
    key: 'matches',
    value: function matches(object) {
      var value = getPath(object, this.path);
      return value === this.value;
    }
  }]);

  return ValueMatcher;
})();

var ValuesMatcher = (function () {
  function ValuesMatcher(path, values) {
    _classCallCheck(this, ValuesMatcher);

    this.path = path;
    this.values = values;
  }

  _createClass(ValuesMatcher, [{
    key: 'matches',
    value: function matches(object) {
      var value = getPath(object, this.path);
      return this.values.indexOf(value) !== -1;
    }
  }]);

  return ValuesMatcher;
})();

function isString(value) {
  return typeof value === 'string';
}

var isArray = Array.isArray;

var PatternMatcher = (function () {
  function PatternMatcher(pattern) {
    _classCallCheck(this, PatternMatcher);

    this._matchers = [];
    this._buildMatchers(pattern);
  }

  _createClass(PatternMatcher, [{
    key: 'matches',
    value: function matches(object) {
      return this._matchers.every(function (pathMatcher) {
        return pathMatcher.matches(object);
      });
    }
  }, {
    key: '_buildMatchers',
    value: function _buildMatchers(pattern) {
      var _this = this;

      var currentPath = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      if (isString(pattern) || !pattern) {
        return this._addValueMatcher(currentPath, pattern);
      }
      if (isArray(pattern)) {
        return this._addValuesMatcher(currentPath, pattern);
      }

      Object.keys(pattern).forEach(function (key) {
        var subPattern = pattern[key];
        _this._buildMatchers(subPattern, [].concat(_toConsumableArray(currentPath), [key]));
      });
    }
  }, {
    key: '_addValueMatcher',
    value: function _addValueMatcher(path, value) {
      this._matchers.push(new ValueMatcher(path, value));
    }
  }, {
    key: '_addValuesMatcher',
    value: function _addValuesMatcher(path, values) {
      this._matchers.push(new ValuesMatcher(path, values));
    }
  }]);

  return PatternMatcher;
})();

exports['default'] = PatternMatcher;

function buildPatternMatcher(pattern) {
  var matcher = new PatternMatcher(pattern);
  return matcher.matches.bind(matcher);
}