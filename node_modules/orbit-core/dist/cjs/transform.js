'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var objects = require('./lib/objects');
var uuid = require('./lib/uuid');

/* eslint-disable valid-jsdoc */

var Transform = (function () {
  function Transform(ops) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Transform);

    this.operations = objects.toArray(ops);
    this.id = options.id || uuid.uuid();
  }

  _createClass(Transform, [{
    key: 'isEmpty',
    value: function isEmpty() {
      return this.operations.length === 0;
    }
  }]);

  return Transform;
})();

exports['default'] = Transform;

Transform.from = function (transformOrOperations) {
  if (transformOrOperations instanceof Transform) {
    return transformOrOperations;
  } else {
    return new Transform(transformOrOperations);
  }
};