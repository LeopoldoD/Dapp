'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var objects = require('./lib/objects');
var arrays = require('./lib/arrays');
var assert = require('./lib/assert');

var KeyMap = (function () {
  function KeyMap() {
    _classCallCheck(this, KeyMap);

    this._data = {};
  }

  /**
   Return a key value given a type of model, key name and id.
    @param {String} type - type of model
   @param {String} keyName - the name of the key
   @param {String} idValue - the model id
   @returns {string} the model's key value
   */

  _createClass(KeyMap, [{
    key: 'idToKey',
    value: function idToKey(type, keyName, idValue) {
      return objects.get(this._data, [type, keyName, 'idToKeyMap', idValue]);
    }

    /**
     Return an id value given a type of model, key name and key value.
      @param {String} type - type of model
     @param {String} keyName - the name of the key
     @param {String} keyValue - the value of the key to look up
     @returns {string} the model's id value
     */
  }, {
    key: 'keyToId',
    value: function keyToId(type, keyName, keyValue) {
      return objects.get(this._data, [type, keyName, 'keyToIdMap', keyValue]);
    }

    /**
     Given a data object structured according to this schema, register all of its
     key mappings. This data object may contain any number of records and types.
      @param {Object} document - data structured according to the schema
     @returns {undefined}
     */
  }, {
    key: 'pushDocument',
    value: function pushDocument(document) {
      var _this = this;

      if (!document) {
        return;
      }

      Object.keys(document).forEach(function (type) {
        var idRecordMap = document[type];
        Object.keys(idRecordMap).forEach(function (id) {
          var record = idRecordMap[id];
          _this.pushRecord({
            type: type,
            id: record.id,
            keys: record.keys
          });
        });
      });
    }

    /**
     Integrate the id and key values of a record into this keyMap.
      @param {Object} record - a data structure that represents a record
     @param {String} record.type - the type of model
     @param {String} record.id - the model's ID
     @param {Object} record.keys - a map of keys and their values
     @returns {undefined}
     */
  }, {
    key: 'pushRecord',
    value: function pushRecord(_ref) {
      var _this2 = this;

      var type = _ref.type;
      var id = _ref.id;
      var keys = _ref.keys;

      assert.assert('You pushed a ' + type + ' record into the KeyMap that does not have an ID. Make sure you provide an Orbit ID to this record before pushing.', id);

      if (!keys) {
        return;
      }

      Object.keys(keys).forEach(function (keyName) {
        var keyValue = keys[keyName];
        objects.set(_this2._data, [type, keyName, 'idToKeyMap', id], keyValue);
        objects.set(_this2._data, [type, keyName, 'keyToIdMap', keyValue], id);
      });
    }

    /**
     Given a record, find the cached ID if it exists.
      @param {Object} record - a data structure that represents a record
     @returns {String|undefined} either the ID value or nothing
     */
  }, {
    key: 'findIdForRecord',
    value: function findIdForRecord(record) {
      var _this3 = this;

      if (!record.keys) {
        return;
      }

      var keyNames = Object.keys(record.keys);

      return arrays.firstResult(keyNames, function (keyName) {
        var keyValue = record.keys[keyName];
        if (keyValue) {
          return _this3.keyToId(record.type, keyName, keyValue);
        }
      });
    }
  }]);

  return KeyMap;
})();

exports['default'] = KeyMap;