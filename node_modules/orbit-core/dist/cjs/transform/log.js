'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Orbit = require('../main');
var Evented = require('../evented');
var exceptions = require('../lib/exceptions');

/* globals Immutable */

var TransformLog = (function () {
  function TransformLog(data) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, TransformLog);

    this.name = options.name;
    this.bucket = options.bucket;
    this._reify(data);
  }

  _createClass(TransformLog, [{
    key: 'append',
    value: function append() {
      var _this = this;

      for (var _len = arguments.length, transformIds = Array(_len), _key = 0; _key < _len; _key++) {
        transformIds[_key] = arguments[_key];
      }

      var data = undefined;

      return this.reified.then(function () {
        var _data;

        data = _this._data;
        _this._data = (_data = data).push.apply(_data, transformIds);
        return _this._persist();
      }).then(function () {
        _this.emit('append', transformIds, data);
      });
    }
  }, {
    key: 'before',
    value: function before(transformId) {
      var relativePosition = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

      var index = this._data.indexOf(transformId);
      if (index === -1) {
        throw new exceptions.TransformNotLoggedException(transformId);
      }

      var position = index + relativePosition;
      if (position < 0 || position >= this._data.size) {
        throw new exceptions.OutOfRangeException(position);
      }

      return this._data.slice(0, position).toJS();
    }
  }, {
    key: 'after',
    value: function after(transformId) {
      var relativePosition = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

      var index = this._data.indexOf(transformId);
      if (index === -1) {
        throw new exceptions.TransformNotLoggedException(transformId);
      }

      var position = index + 1 + relativePosition;
      if (position < 0 || position > this._data.size) {
        throw new exceptions.OutOfRangeException(position);
      }

      return this._data.slice(position).toJS();
    }
  }, {
    key: 'truncate',
    value: function truncate(transformId) {
      var _this2 = this;

      var relativePosition = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

      var data = undefined;

      return this.reified.then(function () {
        data = _this2._data;
        var index = _this2._data.indexOf(transformId);
        if (index === -1) {
          throw new exceptions.TransformNotLoggedException(transformId);
        }

        var position = index + relativePosition;
        if (position < 0 || position > _this2._data.size) {
          throw new exceptions.OutOfRangeException(position);
        }

        if (position === _this2._data.length) {
          _this2._data = data.clear();
        } else {
          _this2._data = data.slice(position);
        }

        return _this2._persist();
      }).then(function () {
        _this2.emit('truncate', transformId, relativePosition, data);
      });
    }
  }, {
    key: 'rollback',
    value: function rollback(transformId) {
      var _this3 = this;

      var relativePosition = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

      var data = undefined;

      return this.reified.then(function () {
        data = _this3._data;
        var index = _this3._data.indexOf(transformId);
        if (index === -1) {
          throw new exceptions.TransformNotLoggedException(transformId);
        }

        var position = index + 1 + relativePosition;
        if (position < 0 || position > _this3._data.size) {
          throw new exceptions.OutOfRangeException(position);
        }

        _this3._data = data.setSize(position);

        return _this3._persist();
      }).then(function () {
        _this3.emit('rollback', transformId, relativePosition, data);
      });
    }
  }, {
    key: 'clear',
    value: function clear() {
      var _this4 = this;

      var data = undefined;

      return this.reified.then(function () {
        data = _this4._data;
        _this4._data = data.clear();
        return _this4._persist();
      }).then(function () {
        return _this4.emit('clear', data);
      });
    }
  }, {
    key: 'contains',
    value: function contains(transformId) {
      return this._data.includes(transformId);
    }
  }, {
    key: '_persist',
    value: function _persist() {
      if (this.bucket) {
        return this.bucket.setItem(this.name, this._data.toJS());
      } else {
        return Orbit['default'].Promise.resolve();
      }
    }
  }, {
    key: '_reify',
    value: function _reify(data) {
      var _this5 = this;

      if (!data && this.bucket) {
        this.reified = this.bucket.getItem(this.name).then(function (bucketData) {
          return _this5._initData(bucketData);
        });
      } else {
        this._initData(data);
        this.reified = Orbit['default'].Promise.resolve();
      }
    }
  }, {
    key: '_initData',
    value: function _initData(data) {
      if (data) {
        if (Immutable.List.isList(data)) {
          this._data = data;
        } else {
          this._data = new Immutable.List(data);
        }
      } else {
        this._data = new Immutable.List();
      }
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }, {
    key: 'head',
    get: function get() {
      return this._data.last();
    }
  }, {
    key: 'entries',
    get: function get() {
      return this._data.toArray();
    }
  }, {
    key: 'length',
    get: function get() {
      return this._data.size;
    }
  }]);

  return TransformLog;
})();

exports['default'] = TransformLog;

Evented['default'].extend(TransformLog.prototype);