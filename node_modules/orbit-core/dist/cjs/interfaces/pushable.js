'use strict';

var Orbit = require('../main');
var assert = require('../lib/assert');
var objects = require('../lib/objects');
var Source = require('../source');

exports['default'] = {
  /**
   Mixes the `Pushable` interface into a source.
    The `Pushable` interface adds a single method to a Source: `push`. This
   method accepts a `Transform` instance as an argument and returns a promise
   that resolves to an array of `Transform` instances that are applied as a
   result. In other words, `push` captures the direct and side effects of
   applying a `Transform` to a source.
    This interface is part of the "request flow" in Orbit. Requests trigger
   events before and after processing of each request. Observers can delay the
   resolution of a request by returning a promise in an event listener.
    The `Pushable` interface introduces the following events:
    * `beforePush` - emitted prior to the processing of `push`, this event
     includes the requested `Transform` as an argument.
    * `push` - emitted after a `push` has successfully been applied, this
     event's arguments include both the requested `Transform` and an array of
     the actual applied `Transform` instances.
    * `pushFail` - emitted when an error has occurred pushing a transform, this
     event's arguments include both the requested `Transform` and the error.
    A `Pushable` source must implement a private method `_push`, which performs
   the processing required for `push` and returns a promise that resolves to an
   array of `Transform` instances.
    @method extend
   @param {Object} source - Source to extend
   @returns {Object} Extended source
   */
  extend: function extend(source) {
    if (source._pushable === undefined) {
      assert.assert('Pushable interface can only be applied to a Source', source instanceof Source['default']);
      objects.extend(source, this['interface']);
    }
    return source;
  },

  'interface': {
    _pushable: true,

    push: function push(transform) {
      if (this.transformLog.contains(transform.id)) {
        return Orbit['default'].Promise.resolve([]);
      }

      return this._enqueueRequest('push', transform);
    },

    __push__: function __push__(transform) {
      var _this = this;

      if (this.transformLog.contains(transform.id)) {
        return Orbit['default'].Promise.resolve([]);
      }

      return this.fulfillInSeries('beforePush', transform).then(function () {
        return _this._push(transform);
      }).then(function (result) {
        return _this._transformed(result);
      }).then(function (result) {
        return _this.settleInSeries('push', transform, result).then(function () {
          return result;
        });
      })['catch'](function (error) {
        return _this.settleInSeries('pushFail', transform, error).then(function () {
          throw error;
        });
      });
    }
  }
};