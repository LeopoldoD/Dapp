'use strict';

var Orbit = require('../main');
var assert = require('../lib/assert');
var objects = require('../lib/objects');
var Source = require('../source');

exports['default'] = {
  /**
   Mixes the `Syncable` interface into a source.
    The `Syncable` interface adds the `sync` method to a source. This method
   accepts a `Transform` or array of `Transform`s as an argument and applies it
   to the source.
    This interface is part of the "sync flow" in Orbit. This flow is used to
   synchronize the contents of sources.
    Other sources can participate in the resolution of a `sync` by observing
   the `transform` event, which is emitted whenever a new `Transform` is
   applied to a source.
    @method extend
   @param {Object} source - Source to extend
   @returns {Object} Extended source
   */
  extend: function extend(source) {
    if (source._syncable === undefined) {
      assert.assert('Syncable interface can only be applied to a Source', source instanceof Source['default']);
      objects.extend(source, this['interface']);
    }
    return source;
  },

  'interface': {
    _syncable: true,

    sync: function sync(transformOrTransforms) {
      var _this = this;

      if (objects.isArray(transformOrTransforms)) {
        var transforms = transformOrTransforms;

        return transforms.reduce(function (chain, transform) {
          return chain.then(function () {
            return _this.sync(transform);
          });
        }, Orbit['default'].Promise.resolve());
      } else {
        var transform = transformOrTransforms;

        if (this.transformLog.contains(transform.id)) {
          return Orbit['default'].Promise.resolve();
        }

        return this._enqueueSync('sync', transform);
      }
    },

    __sync__: function __sync__(transform) {
      var _this2 = this;

      if (this.transformLog.contains(transform.id)) {
        return Orbit['default'].Promise.resolve();
      }

      return this._sync(transform).then(function () {
        return _this2._transformed([transform]);
      });
    }
  }
};