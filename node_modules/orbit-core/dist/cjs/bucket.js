'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Orbit = require('./main');
var Evented = require('./evented');
var assert = require('./lib/assert');

var Bucket = (function () {
  function Bucket() {
    var settings = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Bucket);

    assert.assert('Bucket requires a name', settings.name);

    this._name = settings.name;

    if (settings.version === undefined) {
      settings.version = 1;
    }

    settings.namespace = settings.namespace || 'orbit-bucket';

    this._applySettings(settings);
  }

  _createClass(Bucket, [{
    key: 'upgrade',

    /**
     * Upgrades Bucket to a new version with new settings.
     *
     * Settings, beyond `version`, are bucket-specific.
     *
     * @param  {Object}   [settings={}]      Settings.
     * @param  {Integer}  [settings.version] Optional. Version. Defaults to the current version + 1.
     * @return {Promise}                     Promise that resolves when upgrade has completed.
     */
    value: function upgrade() {
      var _this = this;

      var settings = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      if (settings.version === undefined) {
        settings.version = this._version + 1;
      }
      return this._applySettings(settings).then(function () {
        return _this.emit('upgrade', _this._version);
      });
    }

    /**
     * Applies settings passed from a `constructor` or `upgrade`.
     *
     * @private
     * @param  {Object}   settings          Settings.
     * @param  {Integer}  settings.version  Bucket version.
     * @return {Promise}                    Promise that resolves when settings have been applied.
     */
  }, {
    key: '_applySettings',
    value: function _applySettings(settings) {
      if (settings.namespace) {
        this._namespace = settings.namespace;
      }
      this._version = settings.version;
      return Orbit['default'].Promise.resolve();
    }
  }, {
    key: 'getItem',
    value: function getItem() /* key */{
      console.error('Bucket#getItem not implemented');
    }
  }, {
    key: 'setItem',
    value: function setItem() /* key, value */{
      console.error('Bucket#setItem not implemented');
    }
  }, {
    key: 'removeItem',
    value: function removeItem() /* key */{
      console.error('Bucket#removeItem not implemented');
    }
  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }
  }, {
    key: 'namespace',
    get: function get() {
      return this._namespace;
    }
  }, {
    key: 'version',
    get: function get() {
      return this._version;
    }
  }]);

  return Bucket;
})();

exports['default'] = Bucket;

Evented['default'].extend(Bucket.prototype);