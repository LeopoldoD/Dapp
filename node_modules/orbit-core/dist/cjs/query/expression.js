'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

exports.queryExpression = queryExpression;
exports.isQueryExpression = isQueryExpression;

var objects = require('orbit/lib/objects');

var QueryExpression = (function () {
  function QueryExpression(op, args) {
    _classCallCheck(this, QueryExpression);

    this.__oqe__ = true;
    this.op = op;
    this.args = args;
  }

  _createClass(QueryExpression, [{
    key: 'toString',
    value: function toString() {
      var formattedArgs = this.args.map(function (arg) {
        return '' + arg;
      }).join(', ');
      return this.op + '(' + formattedArgs + ')';
    }
  }]);

  return QueryExpression;
})();

function queryExpression(op) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return new QueryExpression(op, args);
}

function isQueryExpression(obj) {
  return objects.isObject(obj) && obj.__oqe__;
}

exports['default'] = QueryExpression;