'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ___expression = require('./expression');

var QueryContext = (function () {
  function QueryContext(evaluator) {
    _classCallCheck(this, QueryContext);

    this.evaluator = evaluator;
  }

  _createClass(QueryContext, [{
    key: 'evaluate',
    value: function evaluate(expression) {
      if (___expression.isQueryExpression(expression)) {
        var operator = this.evaluator.operators[expression.op];

        if (!operator) {
          throw new Error('Unable to find operator: ' + expression.op);
        }

        return operator.evaluate(this, expression.args);
      } else {
        return expression;
      }
    }
  }]);

  return QueryContext;
})();

exports['default'] = QueryContext;