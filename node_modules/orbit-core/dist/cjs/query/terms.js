'use strict';

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ___expression = require('./expression');

var TermBase = (function () {
  function TermBase(expression) {
    _classCallCheck(this, TermBase);

    this.expression = expression;
  }

  _createClass(TermBase, [{
    key: 'toQueryExpression',
    value: function toQueryExpression() {
      return this.expression;
    }
  }]);

  return TermBase;
})();

var Cursor = (function (_TermBase) {
  _inherits(Cursor, _TermBase);

  function Cursor() {
    _classCallCheck(this, Cursor);

    _get(Object.getPrototypeOf(Cursor.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Cursor, [{
    key: 'get',
    value: function get(path) {
      return new Value(___expression.queryExpression('get', path));
    }
  }]);

  return Cursor;
})(TermBase);

var Value = (function (_TermBase2) {
  _inherits(Value, _TermBase2);

  function Value() {
    _classCallCheck(this, Value);

    _get(Object.getPrototypeOf(Value.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Value, [{
    key: 'equal',
    value: function equal(value) {
      return ___expression.queryExpression('equal', this.expression, value);
    }
  }]);

  return Value;
})(TermBase);

var RecordCursor = (function (_Cursor) {
  _inherits(RecordCursor, _Cursor);

  function RecordCursor() {
    _classCallCheck(this, RecordCursor);

    _get(Object.getPrototypeOf(RecordCursor.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RecordCursor, [{
    key: 'attribute',
    value: function attribute(name) {
      return new Value(___expression.queryExpression('attribute', name));
    }
  }]);

  return RecordCursor;
})(Cursor);

var Record = (function (_TermBase3) {
  _inherits(Record, _TermBase3);

  function Record(record) {
    _classCallCheck(this, Record);

    _get(Object.getPrototypeOf(Record.prototype), 'constructor', this).call(this, ___expression.queryExpression('record', record));
  }

  return Record;
})(TermBase);

var Records = (function (_TermBase4) {
  _inherits(Records, _TermBase4);

  function Records() {
    _classCallCheck(this, Records);

    _get(Object.getPrototypeOf(Records.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Records, [{
    key: 'filter',
    value: function filter(predicateExpression) {
      var filterBuilder = new RecordCursor();
      return new this.constructor(___expression.queryExpression('filter', this.expression, predicateExpression(filterBuilder)));
    }
  }, {
    key: 'filterAttributes',
    value: function filterAttributes(attributeValues) {
      var attributeExpressions = Object.keys(attributeValues).map(function (attribute) {
        return ___expression.queryExpression('equal', ___expression.queryExpression('attribute', attribute), attributeValues[attribute]);
      });

      var andExpression = attributeExpressions.length === 1 ? attributeExpressions[0] : ___expression.queryExpression.apply(___expression, ['and'].concat(_toConsumableArray(attributeExpressions)));

      return new this.constructor(___expression.queryExpression('filter', this.expression, andExpression));
    }
  }], [{
    key: 'withScopes',
    value: function withScopes(scopes) {
      var typeTerm = function typeTerm(oqe) {
        Records.call(this, oqe);
      };

      typeTerm.prototype = Object.create(Records.prototype);
      Object.assign(typeTerm.prototype, scopes);

      return typeTerm;
    }
  }]);

  return Records;
})(TermBase);

var RelatedRecord = (function (_TermBase5) {
  _inherits(RelatedRecord, _TermBase5);

  function RelatedRecord(record, relationship) {
    _classCallCheck(this, RelatedRecord);

    _get(Object.getPrototypeOf(RelatedRecord.prototype), 'constructor', this).call(this, ___expression.queryExpression('relatedRecord', record, relationship));
  }

  return RelatedRecord;
})(TermBase);

var RelatedRecords = (function (_TermBase6) {
  _inherits(RelatedRecords, _TermBase6);

  function RelatedRecords(record, relationship) {
    _classCallCheck(this, RelatedRecords);

    _get(Object.getPrototypeOf(RelatedRecords.prototype), 'constructor', this).call(this, ___expression.queryExpression('relatedRecords', record, relationship));
  }

  return RelatedRecords;
})(TermBase);

exports.TermBase = TermBase;
exports.Cursor = Cursor;
exports.Value = Value;
exports.RecordCursor = RecordCursor;
exports.Record = Record;
exports.Records = Records;
exports.RelatedRecord = RelatedRecord;
exports.RelatedRecords = RelatedRecords;