'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Orbit = require('./main');
var assert = require('./lib/assert');

var Coordinator = (function () {
  function Coordinator() {
    var _this = this;

    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Coordinator);

    this._active = false;
    this._sources = [];
    this._transformListeners = {};

    if (options.sources) {
      options.sources.forEach(function (source) {
        return _this.addSource(source);
      });
    }

    if (options.autoActivate !== false) {
      this.activate();
    }
  }

  _createClass(Coordinator, [{
    key: 'addSource',
    value: function addSource(source) {
      assert.assert('Source \'' + source.name + '\' has already been added to the Coordinator.', this._sources.indexOf(source) === -1);

      this._sources.push(source);

      if (this._active) {
        this._activateSource(source);
      }
    }
  }, {
    key: 'removeSource',
    value: function removeSource(source) {
      assert.assert('Source \'' + source.name + '\' has not been added to the Coordinator.', this._sources.indexOf(source) > -1);

      if (this._active) {
        this._deactivateSource(source);
      }

      this._sources.pop(source);
    }
  }, {
    key: 'activate',
    value: function activate() {
      var _this2 = this;

      this.activated = this.review().then(function () {
        _this2._active = true;
        _this2._sources.forEach(function (source) {
          return _this2._activateSource(source);
        });
      });

      return this.activated;
    }
  }, {
    key: 'review',
    value: function review() {
      var _this3 = this;

      if (this._reviewing) {
        this._extraReviewNeeded = true;
      } else {
        this._reviewing = this._reifySources().then(function () {
          return _this3._review();
        }).then(function () {
          if (_this3._extraReviewNeeded) {
            _this3._extraReviewNeeded = false;
            return _this3._review();
          } else {
            _this3._reviewing = null;
          }
        });
      }
      return this._reviewing;
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      var _this4 = this;

      this._active = false;
      this.activated = null;
      this._sources.forEach(function (source) {
        return _this4._deactivateSource(source);
      });
    }
  }, {
    key: '_reifySources',
    value: function _reifySources() {
      return this._sources.reduce(function (chain, source) {
        return chain.then(function () {
          return source.transformLog.reified;
        });
      }, Orbit['default'].Promise.resolve());
    }
  }, {
    key: '_review',
    value: function _review() {
      if (this._sources.length > 1) {
        var primaryLog = this._sources[0].transformLog;
        var otherLogs = this._sources.slice(1).map(function (s) {
          return s.transformLog;
        });
        var entries = primaryLog.entries;
        var latestMatch = undefined;

        for (var i = 0; i < entries.length; i++) {
          var entry = entries[i];

          var match = true;
          for (var j = 0; j < otherLogs.length; j++) {
            if (!otherLogs[j].contains(entry)) {
              match = false;
              break;
            }
          }

          if (match) {
            latestMatch = entry;
          } else {
            break;
          }
        }

        if (latestMatch) {
          return this._truncateSources(latestMatch, +1);
        }
      }
      return Orbit['default'].Promise.resolve();
    }
  }, {
    key: '_truncateSources',
    value: function _truncateSources(transformId, relativePosition) {
      return this._sources.reduce(function (chain, source) {
        return chain.then(function () {
          return source.transformLog.truncate(transformId, relativePosition);
        });
      }, Orbit['default'].Promise.resolve());
    }
  }, {
    key: '_activateSource',
    value: function _activateSource(source) {
      var _this5 = this;

      var listener = this._transformListeners[source.name] = function (transform) {
        _this5._sourceTransformed(source, transform.id);
      };
      source.on('transform', listener);
    }
  }, {
    key: '_deactivateSource',
    value: function _deactivateSource(source) {
      source.off('transform', this._transformListeners[source.name]);
    }
  }, {
    key: '_sourceTransformed',
    value: function _sourceTransformed() /* source, transformId */{
      this.review();
    }
  }, {
    key: 'active',
    get: function get() {
      return this._active;
    }
  }]);

  return Coordinator;
})();

exports['default'] = Coordinator;