'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Orbit = require('./main');

/* eslint-disable valid-jsdoc */

var Action = (function () {
  /**
   * Constructor for `Action` class.
   *
   * @param  {Object} target         Target object
   * @param  {String} method         Name of method to call on `target`
   * @param  {Object} [options={}]   Options
   * @param  {Any}    [options.meta] Optional metadata
   * @param  {Any}    [options.data] Optional data to send as an arg when calling `method`
   * @constructor
   */

  function Action(target, method) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, Action);

    this.target = target;
    this.method = method;
    this.meta = options.meta;
    this.data = options.data;

    this.reset();
  }

  _createClass(Action, [{
    key: 'reset',
    value: function reset() {
      var _this = this;

      this._started = false;
      this._settled = false;
      this._resolution = new Orbit['default'].Promise(function (resolve, reject) {
        _this._success = function (r) {
          _this._settled = true;
          resolve(r);
        };

        _this._fail = function (e) {
          _this._settled = true;
          reject(e);
        };
      });
    }
  }, {
    key: 'settle',
    value: function settle() {
      return this._resolution;
    }
  }, {
    key: 'process',
    value: function process() {
      if (!this._started) {
        this._started = true;

        try {
          var method = this.target[this.method];

          var ret = undefined;
          if (this.data) {
            ret = method.call(this.target, this.data);
          } else {
            ret = method.call(this.target);
          }

          if (ret && ret.then) {
            ret.then(this._success, this._fail);
          } else {
            this._success(ret);
          }
        } catch (e) {
          this._fail(e);
        }
      }

      return this.settle();
    }
  }, {
    key: 'serialize',
    value: function serialize() {
      var method = this.method;
      var data = this.data;
      var meta = this.meta;

      return { method: method, data: data, meta: meta };
    }
  }, {
    key: 'started',
    get: function get() {
      return this._started;
    }
  }, {
    key: 'settled',
    get: function get() {
      return this._settled;
    }
  }], [{
    key: 'deserialize',
    value: function deserialize(target, serialized) {
      return new Action(target, serialized.method, {
        data: serialized.data,
        meta: serialized.meta
      });
    }
  }]);

  return Action;
})();

exports['default'] = Action;