'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Orbit = require('./main');
var Action = require('./action');
var Evented = require('./evented');
var assert = require('./lib/assert');

/* eslint-disable valid-jsdoc */

var ActionQueue = (function () {
  function ActionQueue(target) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, ActionQueue);

    assert.assert('ActionQueue requires Orbit.Promise to be defined', Orbit['default'].Promise);

    this.target = target;

    this.name = options.name;
    this.bucket = options.bucket;
    this.autoProcess = options.autoProcess !== undefined ? options.autoProcess : true;
    this._reify().then(function () {
      if (_this.length > 0 && _this.autoProcess) {
        _this.process();
      }
    });
  }

  _createClass(ActionQueue, [{
    key: 'push',
    value: function push(method, options) {
      var _this2 = this;

      return this.reified.then(function () {
        var action = new Action['default'](_this2.target, method, options);
        _this2._actions.push(action);
        return _this2._persist().then(function () {
          if (_this2.autoProcess) {
            return _this2.process().then(function () {
              return action;
            });
          } else {
            return action;
          }
        });
      });
    }
  }, {
    key: 'retry',
    value: function retry() {
      var _this3 = this;

      return this.reified.then(function () {
        _this3._cancel();
        _this3.current.reset();
        return _this3._persist();
      }).then(function () {
        return _this3.process();
      });
    }
  }, {
    key: 'skip',
    value: function skip() {
      var _this4 = this;

      return this.reified.then(function () {
        _this4._cancel();
        _this4._actions.shift();
        return _this4._persist();
      }).then(function () {
        return _this4.process();
      });
    }
  }, {
    key: 'clear',
    value: function clear() {
      var _this5 = this;

      return this.reified.then(function () {
        _this5._cancel();
        _this5._actions = [];
        return _this5._persist();
      }).then(function () {
        return _this5.process();
      });
    }
  }, {
    key: 'shift',
    value: function shift() {
      var _this6 = this;

      var action = undefined;

      return this.reified.then(function () {
        _this6._cancel();
        action = _this6._actions.shift();
        return _this6._persist();
      }).then(function () {
        return action;
      });
    }
  }, {
    key: 'unshift',
    value: function unshift(method, options) {
      var _this7 = this;

      var action = undefined;

      return this.reified.then(function () {
        action = new Action['default'](_this7.target, method, options);
        _this7._cancel();
        _this7._actions.unshift(action);
        return _this7._persist();
      }).then(function () {
        return action;
      });
    }
  }, {
    key: 'process',
    value: function process() {
      var _this8 = this;

      return this.reified.then(function () {
        var resolution = _this8._resolution;

        if (!resolution) {
          if (_this8._actions.length === 0) {
            resolution = Orbit['default'].Promise.resolve();
            _this8._complete();
          } else {
            _this8._error = null;
            _this8._resolution = resolution = new Orbit['default'].Promise(function (resolve) {
              _this8._resolve = resolve;
            });
            _this8._settleEach(resolution);
          }
        }

        return resolution;
      });
    }
  }, {
    key: '_complete',
    value: function _complete() {
      if (this._resolve) {
        this._resolve();
      }
      this._error = null;
      this._resolution = null;
      this.emit('complete');
    }
  }, {
    key: '_fail',
    value: function _fail(action, e) {
      if (this._resolve) {
        this._resolve();
      }
      this._error = e;
      this._resolution = null;
      this.emit('fail', action, e);
    }
  }, {
    key: '_cancel',
    value: function _cancel() {
      this._error = null;
      this._resolution = null;
    }
  }, {
    key: '_settleEach',
    value: function _settleEach(resolution) {
      var _this9 = this;

      if (this._actions.length === 0) {
        this._complete();
      } else {
        (function () {
          var action = _this9._actions[0];

          _this9.emit('beforeAction', action);

          action.process().then(function () {
            if (resolution === _this9._resolution) {
              _this9._actions.shift();
              _this9._persist().then(function () {
                _this9.emit('action', action);
                _this9._settleEach(resolution);
              });
            }
          })['catch'](function (e) {
            if (resolution === _this9._resolution) {
              _this9._fail(action, e);
            }
          });
        })();
      }
    }
  }, {
    key: '_reify',
    value: function _reify() {
      var _this10 = this;

      this._actions = [];

      if (this.bucket) {
        this.reified = this.bucket.getItem(this.name).then(function (serialized) {
          return _this10._deserializeActions(serialized);
        });
      } else {
        this.reified = Orbit['default'].Promise.resolve();
      }

      return this.reified;
    }
  }, {
    key: '_deserializeActions',
    value: function _deserializeActions(serialized) {
      var _this11 = this;

      if (serialized) {
        this._actions = serialized.map(function (a) {
          return Action['default'].deserialize(_this11.target, a);
        });
      } else {
        this._actions = [];
      }
    }
  }, {
    key: '_serializeActions',
    value: function _serializeActions() {
      return this._actions.map(function (a) {
        return a.serialize();
      });
    }
  }, {
    key: '_persist',
    value: function _persist() {
      if (this.bucket) {
        return this.bucket.setItem(this.name, this._serializeActions());
      } else {
        return Orbit['default'].Promise.resolve();
      }
    }
  }, {
    key: 'length',
    get: function get() {
      return this._actions.length;
    }
  }, {
    key: 'current',
    get: function get() {
      return this._actions[0];
    }
  }, {
    key: 'error',
    get: function get() {
      return this._error;
    }
  }, {
    key: 'complete',
    get: function get() {
      return this.length === 0;
    }
  }, {
    key: 'processing',
    get: function get() {
      var current = this.current;

      return current !== undefined && current.started && !current.settled;
    }
  }]);

  return ActionQueue;
})();

exports['default'] = ActionQueue;

Evented['default'].extend(ActionQueue.prototype);